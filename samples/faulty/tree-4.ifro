let _ = define Tree a b of (Or Unit (And b (a (Tree a b)))) in
let _ = define Two a of (And a a) in
let fst = \x -> let Two y = x in $1 y in
let snd = \x -> let Two y = x in $2 y in
let empty = (Tree (left ())) in
let node* = \x nodes -> (Tree right (& x nodes)) in
let @tree* = \tree emptyFun nodeFun ->
             let Tree tree = tree in
             @or
             tree
             emptyFun
             (\tree -> nodeFun ($1 tree) ($2 tree))
in
let node = \left x right -> node* x (Two (& left right)) in
let @tree = \tree emptyFun nodeFun ->
            @tree*
            tree
            emptyFun
            (\el nodes -> nodeFun (fst nodes) el (snd nodes))
in
let binarySearch = \x.= x.> x ->
                   fix
                   \search tree ->
                   @tree
                   tree
                   (\_ -> left ())
                   (\leftNode el rightNode ->
                    if x.= x el
                    then right el
                    else if x.> x el
                         then search x
                         else search leftNode)

in
let intTree = node (node empty
                         33
                         (node empty 36 empty))
                   40
                   (node (node empty 60 empty)
                         63
                         (node empty 82 empty))
in
let strTree = node empty "d" empty in
let print = \toString x ->
             let _ = @or x (\_ -> "nothing") toString
                     |> concat " "
                     |> write in x
in
(& (binarySearch i.= i.> 60 intTree |> print i.toString)
   (binarySearch string.= string.> "foo" strTree |> print (\x -> x)))

